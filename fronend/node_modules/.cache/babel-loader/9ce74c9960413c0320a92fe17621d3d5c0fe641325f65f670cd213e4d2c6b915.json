{"ast":null,"code":"var _jsxFileName = \"/home/jithu/Documents/career-guidance/fronend/src/layouts/STUDENT/MeetingList/components/StaffTable.jsx\";\nimport React from 'react';\nimport DataTable from \"examples/Tables/DataTable\";\nimport MDTypography from 'components/MDTypography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StaffTable({\n  staffData\n}) {\n  const checkMeetingDate = date => {\n    if (date === \"\") {\n      return /*#__PURE__*/_jsxDEV(MDTypography, {\n        children: \"N/A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(MDTypography, {\n        children: \"(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  const checkStatus = status => {\n    if (status === \"pending\") {\n      return /*#__PURE__*/_jsxDEV(MDTypography, {\n        color: \"warning\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this);\n    }\n    if (status === \"completed\") {\n      return /*#__PURE__*/_jsxDEV(MDTypography, {\n        color: \"success\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this);\n    }\n    if (status === \"rejected\") {\n      return /*#__PURE__*/_jsxDEV(MDTypography, {\n        color: \"success\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this);\n    }\n  };\n  const columns = [{\n    Header: \"SNo.\",\n    accessor: \"no\",\n    align: \"left\"\n  },\n  // Updated to \"no\" instead of \"no.\"\n  {\n    Header: \"Staff name\",\n    accessor: \"staffName\",\n    align: \"left\"\n  }, {\n    Header: \"Meeting regarding\",\n    accessor: \"regarding\",\n    align: \"center\"\n  }, {\n    Header: \"Meeting date\",\n    accessor: \"meetingDate\",\n    align: \"center\"\n  }, {\n    Header: \"Meeting time\",\n    accessor: \"meetingTime\",\n    align: \"center\"\n  }, {\n    Header: \"Status\",\n    accessor: \"status\",\n    align: \"center\"\n  }];\n  const rows = staffData.map((data, index) => ({\n    no: index + 1,\n    // Serial number\n    staffName: data.staff_name,\n    regarding: data.meeting_request,\n    meetingDate: checkMeetingDate(data.meeting_date),\n    meetingTime: checkMeetingTime(data.meeting_time),\n    status: checkStatus(data.status)\n  }));\n  return /*#__PURE__*/_jsxDEV(DataTable, {\n    table: {\n      columns,\n      rows\n    },\n    isSorted: true,\n    entriesPerPage: true,\n    showTotalEntries: true,\n    noEndBorder: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n}\n_c = StaffTable;\nvar _c;\n$RefreshReg$(_c, \"StaffTable\");","map":{"version":3,"names":["React","DataTable","MDTypography","jsxDEV","_jsxDEV","StaffTable","staffData","checkMeetingDate","date","children","fileName","_jsxFileName","lineNumber","columnNumber","checkStatus","status","color","columns","Header","accessor","align","rows","map","data","index","no","staffName","staff_name","regarding","meeting_request","meetingDate","meeting_date","meetingTime","checkMeetingTime","meeting_time","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","_c","$RefreshReg$"],"sources":["/home/jithu/Documents/career-guidance/fronend/src/layouts/STUDENT/MeetingList/components/StaffTable.jsx"],"sourcesContent":["import React from 'react'\nimport DataTable from \"examples/Tables/DataTable\";\nimport MDTypography from 'components/MDTypography';\nexport default function StaffTable({ staffData}) {\n  const checkMeetingDate = (date) => {\n    if(date === \"\"){\n      return (\n        <MDTypography>N/A</MDTypography>\n      )\n    }\n    else{\n      return (\n        <MDTypography>(</MDTypography>\n      )\n    }\n  }\n    const checkStatus = (status) => {\n      if(status === \"pending\"){\n        return (\n          <MDTypography color =  \"warning\">{status}</MDTypography>\n        )\n      }\n      if(status === \"completed\"){\n        return (\n          <MDTypography color =  \"success\">{status}</MDTypography>\n        )\n      }\n      if(status === \"rejected\"){\n        return (\n          <MDTypography color =  \"success\">{status}</MDTypography>\n        )\n      }\n    }\n\n  const columns = [\n    { Header: \"SNo.\", accessor: \"no\", align: \"left\" }, // Updated to \"no\" instead of \"no.\"\n    { Header: \"Staff name\", accessor: \"staffName\", align: \"left\" },\n    { Header: \"Meeting regarding\", accessor: \"regarding\", align: \"center\" },\n    { Header: \"Meeting date\", accessor: \"meetingDate\", align: \"center\" },\n    { Header: \"Meeting time\", accessor: \"meetingTime\", align: \"center\" },\n    { Header: \"Status\", accessor: \"status\", align: \"center\" },\n  ];\n  const rows = staffData.map((data, index) => ({\n    no: index + 1, // Serial number\n    staffName: data.staff_name,\n    regarding: data.meeting_request,\n    meetingDate: checkMeetingDate(data.meeting_date),\n    meetingTime: checkMeetingTime(data.meeting_time),\n    status: (\n      checkStatus(data.status)\n    ),\n    \n  }));\n  return (\n      <DataTable\n                  table={{ columns, rows }}\n                  isSorted={true}\n                  entriesPerPage={true}\n                  showTotalEntries={true}\n                  noEndBorder\n                />\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}